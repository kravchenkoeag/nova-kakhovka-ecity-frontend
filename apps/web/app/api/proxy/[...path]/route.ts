// apps/web/app/api/proxy/[...path]/route.ts

import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@ecity/auth";

/**
 * API Proxy –¥–ª—è web –¥–æ–¥–∞—Ç–∫—É
 * –ü—Ä–æ–∫—Å—É—î –∑–∞–ø–∏—Ç–∏ –¥–æ backend API –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
 *
 * üîí –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏—Ö–æ–≤—É—î access tokens –≤—ñ–¥ client-side –∫–æ–¥—É
 * –í—Å—ñ –∑–∞–ø–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É—é—Ç—å—Å—è —á–µ—Ä–µ–∑ session
 */

/**
 * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–∫—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
 * –û–±—Ä–æ–±–ª—è—î –≤—Å—ñ HTTP –º–µ—Ç–æ–¥–∏ —Ç–∞ —Ñ–æ—Ä–≤–∞—Ä–¥–∏—Ç—å —ó—Ö –Ω–∞ backend –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
 */
async function proxyHandler(
  req: NextRequest,
  { params }: { params: { path: string[] } }
) {
  try {
    // üîí –ö–†–ò–¢–ò–ß–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Å—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const session = await getServerSession(authOptions);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    if (!session?.user?.accessToken) {
      return new NextResponse(JSON.stringify({ error: "Unauthorized" }), {
        status: 401,
        headers: { "Content-Type": "application/json" },
      });
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ backend URL –∑ environment
    const backendUrl = process.env.BACKEND_URL || "http://localhost:8080";

    // –ë—É–¥—É—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ backend API
    const path = params.path.join("/");
    const targetUrl = `${backendUrl}/api/v1/${path}`;

    // –ö–æ–ø—ñ—é—î–º–æ query parameters –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
    const url = new URL(targetUrl);
    req.nextUrl.searchParams.forEach((value, key) => {
      url.searchParams.append(key, value);
    });

    // –ì–æ—Ç—É—î–º–æ headers –¥–ª—è backend –∑–∞–ø–∏—Ç—É
    const headers: HeadersInit = {
      "Content-Type": "application/json",
      // üîí –ö–†–ò–¢–ò–ß–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ accessToken –∑ session
      Authorization: `Bearer ${session.user.accessToken}`,
      // –§–æ—Ä–≤–∞—Ä–¥–∏–º–æ —ñ–Ω—à—ñ –≤–∞–∂–ª–∏–≤—ñ headers
      "User-Agent": req.headers.get("user-agent") || "",
      Accept: req.headers.get("accept") || "application/json",
    };

    // –ì–æ—Ç—É—î–º–æ body –¥–ª—è POST/PUT/PATCH –∑–∞–ø–∏—Ç—ñ–≤
    let body: string | undefined = undefined;
    if (
      req.method !== "GET" &&
      req.method !== "HEAD" &&
      req.method !== "DELETE"
    ) {
      body = await req.text();
    }

    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ backend
    const backendResponse = await fetch(url.toString(), {
      method: req.method,
      headers,
      body,
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ timeout –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∑–∞–≤–∏—Å–∞–Ω–Ω—è
      signal: AbortSignal.timeout(30000), // 30 —Å–µ–∫—É–Ω–¥
    });

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ backend
    const responseData = await backendResponse.text();

    // –§–æ—Ä–≤–∞—Ä–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
    return new NextResponse(responseData, {
      status: backendResponse.status,
      statusText: backendResponse.statusText,
      headers: {
        "Content-Type":
          backendResponse.headers.get("content-type") || "application/json",
        // –î–æ–¥–∞—î–º–æ CORS headers —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods":
          "GET, POST, PUT, PATCH, DELETE, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
      },
    });
  } catch (error) {
    console.error("Web API Proxy error:", error);

    // –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
    if (error instanceof Error) {
      console.error("Error message:", error.message);
      console.error("Error stack:", error.stack);
    }

    return new NextResponse(
      JSON.stringify({
        error: "Internal server error",
        message: error instanceof Error ? error.message : "Unknown error",
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json" },
      }
    );
  }
}

/**
 * HTTP –º–µ—Ç–æ–¥–∏ –¥–ª—è –ø—Ä–æ–∫—Å—É–≤–∞–Ω–Ω—è
 * –í—Å—ñ –º–µ—Ç–æ–¥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—é—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —á–µ—Ä–µ–∑ session
 */

// GET –∑–∞–ø–∏—Ç–∏ - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
export async function GET(
  req: NextRequest,
  context: { params: { path: string[] } }
) {
  return proxyHandler(req, context);
}

// POST –∑–∞–ø–∏—Ç–∏ - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
export async function POST(
  req: NextRequest,
  context: { params: { path: string[] } }
) {
  return proxyHandler(req, context);
}

// PUT –∑–∞–ø–∏—Ç–∏ - –ø–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
export async function PUT(
  req: NextRequest,
  context: { params: { path: string[] } }
) {
  return proxyHandler(req, context);
}

// PATCH –∑–∞–ø–∏—Ç–∏ - —á–∞—Å—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
export async function PATCH(
  req: NextRequest,
  context: { params: { path: string[] } }
) {
  return proxyHandler(req, context);
}

// DELETE –∑–∞–ø–∏—Ç–∏ - –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
export async function DELETE(
  req: NextRequest,
  context: { params: { path: string[] } }
) {
  return proxyHandler(req, context);
}

// OPTIONS –∑–∞–ø–∏—Ç–∏ - –¥–ª—è CORS preflight
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 204,
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, PUT, PATCH, DELETE, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, Authorization",
      "Access-Control-Max-Age": "86400",
    },
  });
}
