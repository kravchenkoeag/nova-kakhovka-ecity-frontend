// apps/web/app/(main)/groups/[id]/chat/page.tsx

"use client";

import { useState, useEffect, useRef } from "react";
import { useWebSocket, type WSMessage } from "@ecity/websocket";
import { useAccessToken } from "@ecity/auth";
import { useSession } from "next-auth/react";
import { Button, Input } from "@ecity/ui";
import { Send } from "lucide-react";

/**
 * –°—Ç–æ—Ä—ñ–Ω–∫–∞ —á–∞—Ç—É –≥—Ä—É–ø–∏ –∑ WebSocket –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
 * –î–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ - —á–ª–µ–Ω—ñ–≤ –≥—Ä—É–ø–∏
 *
 * üîí –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ useSession
 * WebSocket –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î access token –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
 */
export default function GroupChatPage({ params }: { params: { id: string } }) {
  // üîí –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ session
  const { data: session } = useSession();
  const token = useAccessToken();

  // WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
  const { isConnected, messages, sendMessage, sendTyping } = useWebSocket(
    token,
    true
  );

  const [inputValue, setInputValue] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É
  useEffect(() => {
    if (inputValue && !isTyping) {
      setIsTyping(true);
      sendTyping(params.id, true);
    } else if (!inputValue && isTyping) {
      setIsTyping(false);
      sendTyping(params.id, false);
    }
  }, [inputValue, isTyping, params.id, sendTyping]);

  // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const handleSend = () => {
    if (!inputValue.trim()) return;

    sendMessage(params.id, inputValue.trim());
    setInputValue("");
    setIsTyping(false);
    sendTyping(params.id, false);
  };

  // Enter –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏, Shift+Enter –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏
  const groupMessages = messages.filter(
    (msg: WSMessage) =>
      msg.type === "message" && msg.data.group_id === params.id
  );

  // –Ø–∫—â–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  if (!session) {
    return (
      <div className="flex items-center justify-center h-[calc(100vh-4rem)] bg-gray-50">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞
          </h2>
          <p className="text-gray-600">
            –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —á–∞—Ç
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-[calc(100vh-4rem)]">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç—É */}
      <div className="bg-white border-b px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-xl font-semibold">–ß–∞—Ç –≥—Ä—É–ø–∏</h1>
            <div className="flex items-center space-x-2 mt-1">
              <div
                className={`h-2 w-2 rounded-full ${
                  isConnected ? "bg-green-500" : "bg-gray-300"
                }`}
              />
              <span className="text-sm text-gray-600">
                {isConnected ? "–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ" : "–í—ñ–¥–∫–ª—é—á–µ–Ω–æ"}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* –û–±–ª–∞—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å */}
      <div className="flex-1 overflow-y-auto p-6 space-y-4 bg-gray-50">
        {groupMessages.length === 0 ? (
          <div className="text-center text-gray-500 mt-8">
            –ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –ü–æ—á–Ω—ñ—Ç—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!
          </div>
        ) : (
          groupMessages.map((msg: WSMessage, index: number) => {
            const isOwn = msg.data.user_id === session?.user?.id;
            return (
              <div
                key={index}
                className={`flex ${isOwn ? "justify-end" : "justify-start"}`}
              >
                <div
                  className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                    isOwn
                      ? "bg-primary text-white"
                      : "bg-white border shadow-sm"
                  }`}
                >
                  {!isOwn && (
                    <p className="text-xs font-semibold mb-1">
                      {msg.data.user_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"}
                    </p>
                  )}
                  <p className="text-sm">{msg.data.content}</p>
                  <p
                    className={`text-xs mt-1 ${
                      isOwn ? "text-blue-100" : "text-gray-500"
                    }`}
                  >
                    {new Date(msg.timestamp).toLocaleTimeString("uk-UA", {
                      hour: "2-digit",
                      minute: "2-digit",
                    })}
                  </p>
                </div>
              </div>
            );
          })
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* –ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */}
      <div className="bg-white border-t p-4">
        <div className="flex items-center space-x-2">
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
            className="flex-1"
            disabled={!isConnected}
          />
          <Button
            onClick={handleSend}
            disabled={!inputValue.trim() || !isConnected}
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
        <p className="text-xs text-gray-500 mt-2">
          –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏. Shift+Enter –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞.
        </p>
      </div>
    </div>
  );
}
