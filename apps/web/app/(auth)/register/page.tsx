// apps/web/app/(auth)/register/page.tsx

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@ecity/ui";
import { AlertCircle } from "lucide-react";
import Link from "next/link";

// –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
export default function RegisterPage() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    confirmPassword: "",
    first_name: "",
    last_name: "",
    phone: "",
  });
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (formData.password !== formData.confirmPassword) {
      setError("–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å");
      return;
    }

    if (formData.password.length < 6) {
      setError("–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤");
      return;
    }

    setIsLoading(true);

    try {
      // –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (–ë–ï–ó confirmPassword)
      const registerData = {
        email: formData.email,
        password: formData.password,
        first_name: formData.first_name,
        last_name: formData.last_name,
        phone: formData.phone || undefined,
      };

      console.log("üì§ Sending registration data:", registerData);

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞–ø—Ä—è–º—É (–¥–ª—è debug)
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/v1/register`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(registerData),
        }
      );

      console.log("üì• Response status:", response.status);

      if (!response.ok) {
        const errorData = await response.json();
        console.error("‚ùå Error response:", errorData);
        throw new Error(errorData.error || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó");
      }

      const data = await response.json();
      console.log("‚úÖ Success response:", data);

      // –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥—ñ–Ω
      router.push("/login?registered=true");
    } catch (err: any) {
      console.error("‚ùå Registration error:", err);
      setError(err.message || "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-8 rounded-xl shadow-lg">
        {/* Logo */}
        <div className="text-center">
          <div className="mx-auto h-16 w-16 bg-blue-600 rounded-xl flex items-center justify-center">
            <span className="text-2xl font-bold text-white">NK</span>
          </div>
          <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
            –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç –≤ e-City
          </p>
        </div>

        {/* Error Alert */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start gap-3">
            <AlertCircle className="h-5 w-5 text-red-600 flex-shrink-0 mt-0.5" />
            <div className="flex-1">
              <p className="text-sm text-red-800">{error}</p>
            </div>
          </div>
        )}

        {/* Form */}
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            {/* –Ü–º'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label
                  htmlFor="first_name"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  –Ü–º'—è *
                </label>
                <input
                  id="first_name"
                  name="first_name"
                  type="text"
                  required
                  value={formData.first_name}
                  onChange={handleChange}
                  className="appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="–Ñ–≤–≥–µ–Ω"
                />
              </div>

              <div>
                <label
                  htmlFor="last_name"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  –ü—Ä—ñ–∑–≤–∏—â–µ *
                </label>
                <input
                  id="last_name"
                  name="last_name"
                  type="text"
                  required
                  value={formData.last_name}
                  onChange={handleChange}
                  className="appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="–ö—Ä–∞–≤—á–µ–Ω–∫–æ"
                />
              </div>
            </div>

            {/* Email */}
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Email *
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={formData.email}
                onChange={handleChange}
                className="appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="kravchenkoeag@gmail.com"
              />
            </div>

            {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
            <div>
              <label
                htmlFor="phone"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                –¢–µ–ª–µ—Ñ–æ–Ω (–æ–ø—Ü—ñ–π–Ω–æ)
              </label>
              <input
                id="phone"
                name="phone"
                type="tel"
                autoComplete="tel"
                value={formData.phone}
                onChange={handleChange}
                className="appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="0502137829"
              />
            </div>

            {/* –ü–∞—Ä–æ–ª—å */}
            <div>
              <label
                htmlFor="password"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                –ü–∞—Ä–æ–ª—å *
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="new-password"
                required
                value={formData.password}
                onChange={handleChange}
                className="appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              />
              <p className="mt-1 text-xs text-gray-500">–ú—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤</p>
            </div>

            {/* –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é */}
            <div>
              <label
                htmlFor="confirmPassword"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å *
              </label>
              <input
                id="confirmPassword"
                name="confirmPassword"
                type="password"
                autoComplete="new-password"
                required
                value={formData.confirmPassword}
                onChange={handleChange}
                className="appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              />
            </div>
          </div>

          {/* Submit Button */}
          <div>
            <Button type="submit" disabled={isLoading} className="w-full">
              {isLoading ? "–†–µ—î—Å—Ç—Ä—É—î–º–æ—Å—è..." : "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"}
            </Button>
          </div>

          {/* Login Link */}
          <div className="text-center">
            <p className="text-sm text-gray-600">
              –í–∂–µ —î –∞–∫–∞—É–Ω—Ç?{" "}
              <Link
                href="/login"
                className="font-medium text-blue-600 hover:text-blue-500"
              >
                –£–≤—ñ–π—Ç–∏
              </Link>
            </p>
          </div>
        </form>
      </div>
    </div>
  );
}
