// packages/api-client/src/client.ts

import type { ApiError } from "@ecity/types";
import { handleFetchError, isUnauthorizedError } from "./interceptors";

interface RequestConfig extends RequestInit {
  token?: string;
}

/**
 * –ë–∞–∑–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ backend API
 *
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î –¥–≤–∞ —Ä–µ–∂–∏–º–∏ —Ä–æ–±–æ—Ç–∏:
 * 1. Direct mode - –ø—Ä—è–º—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ backend (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
 * 2. Proxy mode - –∑–∞–ø–∏—Ç–∏ —á–µ—Ä–µ–∑ Next.js API proxy (–±–µ–∑–ø–µ—á–Ω—ñ—à–µ –¥–ª—è —Ç–æ–∫–µ–Ω—ñ–≤)
 */
export class ApiClient {
  private baseUrl: string;
  private defaultHeaders: HeadersInit;
  private useProxy: boolean;

  /**
   * @param baseUrl - –±–∞–∑–æ–≤–∞ URL backend API
   * @param useProxy - —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Next.js proxy –∑–∞–º—ñ—Å—Ç—å –ø—Ä—è–º–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
   */
  constructor(baseUrl: string, useProxy = false) {
    this.baseUrl = baseUrl;
    this.useProxy = useProxy;
    this.defaultHeaders = {
      "Content-Type": "application/json",
    };
  }

  /**
   * –í–∏–∫–æ–Ω—É—î HTTP –∑–∞–ø–∏—Ç –¥–æ API
   *
   * üîí –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ proxy —Ä–µ–∂–∏–º—É —Ç–æ–∫–µ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –≤ headers
   * –Ω–∞—Ç–æ–º—ñ—Å—Ç—å Next.js –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—î —ó—Ö –Ω–∞ server-side
   */
  private async request<T>(
    endpoint: string,
    config: RequestConfig = {}
  ): Promise<T> {
    const { token, ...fetchConfig } = config;

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ URL –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É
    const url = this.useProxy
      ? `/api/proxy${endpoint}` // –ß–µ—Ä–µ–∑ Next.js proxy
      : `${this.baseUrl}${endpoint}`; // –ü—Ä—è–º–æ –¥–æ backend

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç headers
    const headers: Record<string, string> = {
      "Content-Type": "application/json",
      ...(config.headers as Record<string, string>),
    };

    // üîí –ö–†–ò–¢–ò–ß–ù–û: –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ proxy
    // –í proxy —Ä–µ–∂–∏–º—ñ —Ç–æ–∫–µ–Ω–∏ –¥–æ–¥–∞—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞ server-side
    if (token && !this.useProxy) {
      headers["Authorization"] = `Bearer ${token}`;
    }

    try {
      const response = await fetch(url, {
        ...fetchConfig,
        headers,
      });

      // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ HTTP
      if (!response.ok) {
        // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ 401 –ø–æ–º–∏–ª–æ–∫ (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø)
        if (response.status === 401) {
          await handleFetchError(response);
        }

        // –ü–∞—Ä—Å–∏–º–æ –ø–æ–º–∏–ª–∫—É –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const error: ApiError = await response.json().catch(() => ({
          error: `HTTP Error ${response.status}`,
        }));
        throw new Error(error.error || `Request failed: ${response.status}`);
      }

      // –ü–∞—Ä—Å–∏–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      return response.json();
    } catch (error) {
      console.error("API Request Error:", error);

      // –û–±—Ä–æ–±–∫–∞ 401 –ø–æ–º–∏–ª–æ–∫ —á–µ—Ä–µ–∑ interceptor
      if (isUnauthorizedError(error)) {
        // –ü–æ–º–∏–ª–∫–∞ –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ interceptor'–æ–º (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π logout)
        throw error;
      }

      throw error;
    }
  }

  //GET –∑–∞–ø–∏—Ç - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
  async get<T>(endpoint: string, token?: string): Promise<T> {
    return this.request<T>(endpoint, { method: "GET", token });
  }

  //POST –∑–∞–ø–∏—Ç - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
  async post<T>(endpoint: string, data?: any, token?: string): Promise<T> {
    return this.request<T>(endpoint, {
      method: "POST",
      body: data ? JSON.stringify(data) : undefined,
      token,
    });
  }

  //PUT –∑–∞–ø–∏—Ç - –ø–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
  async put<T>(endpoint: string, data?: any, token?: string): Promise<T> {
    return this.request<T>(endpoint, {
      method: "PUT",
      body: data ? JSON.stringify(data) : undefined,
      token,
    });
  }

  //DELETE –∑–∞–ø–∏—Ç - –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
  async delete<T>(endpoint: string, token?: string): Promise<T> {
    return this.request<T>(endpoint, { method: "DELETE", token });
  }

  //PATCH –∑–∞–ø–∏—Ç - —á–∞—Å—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
  async patch<T>(endpoint: string, data?: any, token?: string): Promise<T> {
    return this.request<T>(endpoint, {
      method: "PATCH",
      body: data ? JSON.stringify(data) : undefined,
      token,
    });
  }

  /**
   * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É proxy
   * @param useProxy - —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ proxy
   */
  setProxyMode(useProxy: boolean): void {
    this.useProxy = useProxy;
  }

  //–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
  isProxyMode(): boolean {
    return this.useProxy;
  }
}
